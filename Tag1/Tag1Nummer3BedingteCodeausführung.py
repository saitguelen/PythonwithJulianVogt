"""
Bedingte Codeausf√ºhrung
(T√ºrkisch: Ko≈üullu Kod √áalƒ±≈ütƒ±rma)

üìò Was bedeutet ‚Äûbedingte Codeausf√ºhrung‚Äú?
Bedingte Codeausf√ºhrung bedeutet: üëâ Ein bestimmter Teil des Codes wird nur dann ausgef√ºhrt, wenn eine bestimmte Bedingung erf√ºllt ist.

Stell dir vor:
‚ÄûWenn etwas wahr ist, dann mache etwas.‚Äú
(auf Englisch: "if this, then that")

üîß Wie funktioniert das in Python?
In Python benutzt man daf√ºr:

if

elif (else if)

else

################################################
if Bedingung:
    # dieser Code wird ausgef√ºhrt, wenn die Bedingung True ist
elif andere_Bedingung:
    # wenn die erste falsch war, aber diese richtig ist
else:
    # wenn keine Bedingung zutrifft

    üìå Was passiert hier im Hintergrund?
Der Computer pr√ºft die erste Bedingung (if):

Ist sie wahr (True)? ‚Üí F√ºhrt nur diesen Block aus.

Wenn nicht wahr, pr√ºft er die n√§chste (elif).

Wenn keine if oder elif wahr ist ‚Üí f√ºhrt er den else-Block aus.

Nur ein einziger Block wird immer ausgef√ºhrt ‚Äì der erste, dessen Bedingung True ist.

üß† Warum wichtig?
Programme sollen intelligent reagieren k√∂nnen.

Z.‚ÄØB. Benutzerpassw√∂rter pr√ºfen, Men√ºauswahl verarbeiten, Entscheidungen treffen, ...

Ohne bedingte Ausf√ºhrung w√§ren Programme statisch und reaktionslos.

"""

alter = int(input("Geben Sie bitte Ihr Alter an: "))

if alter >= 18:
    print("Du bist vollj√§hrig.")
else:
    print("Du bist noch nicht vollj√§hrig.")

print("############################################################")
#################################################
note = int(input("Geben Sie bitte Ihre Note ein: "))

if note == 1:
    print("Sehr gut")
elif note == 2:
    print("Gut")
elif note == 3:
    print("Befriedigend")
else:
    print("Nicht ausreichend")
print("############################################################")

#########################################